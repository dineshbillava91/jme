<?phpclass CommonComponent extends Component {	/**	 * Component name	 *	 * @var string	 */	public $name = 'Common';	public $components = array('Paginator');	/**	 * Youtube API method	 *	 * @param string $youtube_id	 */	//public function youtube_api($youtube_id){	public function youtube_api($youtube_id){		//Variable declaration		$arr = array();		$sqdefault = '';		$mqdefault = '';		$hqdefault = '';		$duration = '';		//The Youtube's API url		$url = 'http://gdata.youtube.com/feeds/api/videos/'.$youtube_id.'?v=2&prettyprint=true&alt=json';		//Using cURL php extension to make the request to youtube API		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $url);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);		//$feed holds json returned by youtube API		$feed = curl_exec($ch);		curl_close($ch);		// Decode JSON data		$arrJSON = json_decode($feed, true);		if(!empty($arrJSON)){			// Loop to access the media : default, hqdefault, mqdefault images			foreach($arrJSON['entry']['media$group']['media$thumbnail'] as $key => $value){				switch($key){					case 0:						$sqdefault = $value['url'];						break;					case 1:						$mqdefault = $value['url'];						break;					case 2:						$hqdefault = $value['url'];						break;				}			}							// Converting Video duration from seconds to Hours:Minutes:Seconds			$duration = gmdate("H:i:s", $arrJSON['entry']['media$group']['yt$duration']['seconds']);							$viewCount = $arrJSON['entry']['yt$statistics']['viewCount'];			// Storing values in array			$arr = array(					'sqdefault'=>$sqdefault,					'mqdefault'=>$mqdefault,					'hqdefault'=>$hqdefault,					'duration'=>$duration,					'viewCount'=>$viewCount			);		}		return $arr;	}	/**	 * This function will remove padding from the string	 * @param string	 * @return trim string	 */	public function trim($str) {		return trim($str);	}	/**	 * This function will remove \n character from any string	 * @param string, string	 * @return string	 */	function removeSlashes($fieldname){		$arr=explode("\\n",$fieldname);		$numItems = count($arr);		$returnValue="";		$i = 0;		foreach ($arr as $value){			if(++$i === $numItems) {				$returnValue.=$value;			}else{				$returnValue.=$value."\n";			}		}		return $returnValue;	}	/*This is function is used to send pushy notfication*/	public function send_notification($message){					// Payload data you want to send to devices		$data = array('message' => $message);		// Optional push notification options (such as iOS notification fields)		$options = array(		    'notification' => array(		        'badge' => 1,		        'sound' => 'ping.aiff',		        'body'  => $message		)		);		// load all device token		$model = ClassRegistry::init('Device');		$devices = $model->find('all',array('conditions' => array('Device.device !=' => ' '),'fields' => array('DISTINCT Device.device'),'order'=>array('Device.created'=>'ASC')));					// chunks an array to each of size of 100 		$devices = array_chunk($devices,100);		// The recipient device tokens		foreach($devices as $chunks){			$deviceTokens = array();			foreach($chunks as $record){				$deviceTokens[] =  $record["Device"]["device"];			}			$result = $this->sendPushNotification($data, $deviceTokens, $options);						}		return $result;	}	/* pushy notification function*/	public function sendPushNotification($data, $tokens, $options) {		$apiKey = '205c58a12c4eeb85752fc50b925d45011c952bae312f84e85717999ab1952c5f';		// Default post data to provided options or empty array		$post = $options ?: array();		// Set notification payload and recipient devices		$post['data'] = $data;		$post['tokens'] = $tokens;		// Set Content-Type header since we're sending JSON		$headers = array(            'Content-Type: application/json'            );            // Initialize curl handle            $ch = curl_init();            // Set URL to Pushy endpoint            curl_setopt($ch, CURLOPT_URL, 'https://api.pushy.me/push?api_key=' . $apiKey);            // Set request method to POST            curl_setopt($ch, CURLOPT_POST, true);            // Set our custom headers            curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);            // Get the response back as string instead of printing it            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);            // Set post data as JSON            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($post, JSON_UNESCAPED_UNICODE));            // Actually send the push            $result = curl_exec($ch);            // Display errors            if (curl_errno($ch)) {            	$result =  curl_error($ch);            }else{            	$result = "Success";            }            // Close curl handle            curl_close($ch);            //print_r($result);            // Debug API response            return $result;	}}